<?php

namespace ContainerVDoVKri;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Firewall_Map_Context_MainService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.firewall.map.context.main' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallContext.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Util/TargetPathTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/ExceptionListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/HttpUtils.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/AbstractListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/LogoutListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallConfig.php';

        $a = ($container->services['security.token_storage'] ?? $container->getSecurity_TokenStorageService());
        $b = ($container->services['router'] ?? $container->getRouterService());

        $c = new \Symfony\Component\Security\Http\HttpUtils($b, $b, '{^https?://%s$}i', '{^https://%s$}i');
        $d = new \Symfony\Component\EventDispatcher\EventDispatcher();
        $d->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () use ($container) {
            return ($container->privates['security.event_dispatcher.main.event_bubbling_listener'] ?? $container->load('getSecurity_EventDispatcher_Main_EventBubblingListenerService'));
        }, 1 => 'bubbleEvent'], 0);
        $d->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent', [0 => function () use ($container) {
            return ($container->privates['security.event_dispatcher.main.event_bubbling_listener'] ?? $container->load('getSecurity_EventDispatcher_Main_EventBubblingListenerService'));
        }, 1 => 'bubbleEvent'], 0);
        $d->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [0 => function () use ($container) {
            return ($container->privates['security.event_dispatcher.main.event_bubbling_listener'] ?? $container->load('getSecurity_EventDispatcher_Main_EventBubblingListenerService'));
        }, 1 => 'bubbleEvent'], 0);
        $d->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [0 => function () use ($container) {
            return ($container->privates['security.event_dispatcher.main.event_bubbling_listener'] ?? $container->load('getSecurity_EventDispatcher_Main_EventBubblingListenerService'));
        }, 1 => 'bubbleEvent'], 0);
        $d->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () use ($container) {
            return ($container->privates['security.logout.listener.legacy_success_listener.main'] ?? $container->load('getSecurity_Logout_Listener_LegacySuccessListener_MainService'));
        }, 1 => 'onLogout'], 0);

        return $container->privates['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.channel_listener'] ?? $container->load('getSecurity_ChannelListenerService'));
            yield 1 => ($container->privates['security.authentication.listener.guard.main'] ?? $container->load('getSecurity_Authentication_Listener_Guard_MainService'));
            yield 2 => ($container->privates['security.authentication.listener.anonymous.main'] ?? $container->load('getSecurity_Authentication_Listener_Anonymous_MainService'));
            yield 3 => ($container->privates['security.access_listener'] ?? $container->load('getSecurity_AccessListenerService'));
        }, 4), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, ($container->privates['security.authentication.trust_resolver'] ?? ($container->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver())), $c, 'main', ($container->privates['App\\Security\\UserAuthenticator'] ?? $container->load('getUserAuthenticatorService')), NULL, NULL, ($container->privates['monolog.logger.security'] ?? $container->load('getMonolog_Logger_SecurityService')), true), new \Symfony\Component\Security\Http\Firewall\LogoutListener($a, $c, $d, ['csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => 'api_logout']), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('main', 'security.user_checker', NULL, true, true, 'security.user.provider.concrete.app_user_provider', NULL, 'App\\Security\\UserAuthenticator', NULL, NULL, [0 => 'guard', 1 => 'anonymous'], NULL));
    }
}
